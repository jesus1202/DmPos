package com.dematicket.form;

import com.dematicket.bean.DocumentosVO;
import com.dematicket.bean.VentasCabeceraVO;
import com.dematicket.bean.VentasDetalleVO;
import com.dematicket.data.DocumentosDAO;
import com.dematicket.data.SesionData;
import com.dematicket.data.UsuarioData;
import com.dematicket.print.DirectPrinterT88V;
import com.dematicket.util.DbConnection;
import com.dematicket.util.TipoArchivo;
import com.dematicket.util.Util;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lmonge
 */
public class FormAnulacion extends javax.swing.JFrame {
    private DefaultTableModel modelo;
    String cabecera = "";
    ArrayList<String> detalle = new ArrayList();
    /**
     * Creates new form FormTicket
     */
    public FormAnulacion() {
        initComponents();
        loadComponentes();        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTotal = new javax.swing.JLabel();
        lblTotal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = //jcastillo inicio
        new javax.swing.JTable(){

            public boolean isCellEditable(int rowIndex, int colIndex) {

                return false;

            }
        };
        //jcastillo fin;
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jcbTipoDocumento = new javax.swing.JComboBox();
        labelTicket = new javax.swing.JLabel();
        txtSerie = new javax.swing.JTextField();
        txtNumero = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        labelTipo1 = new javax.swing.JLabel();
        btnAnular = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);

        labelTotal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelTotal.setText("TOTAL:");

        lblTotal.setEditable(false);
        lblTotal.setColumns(20);
        lblTotal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(204, 0, 0));
        lblTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jcbTipoDocumento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jcbTipoDocumento.setMaximumSize(new java.awt.Dimension(350, 21));

        labelTicket.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelTicket.setText("Ticket:");

        txtSerie.setMaximumSize(new java.awt.Dimension(40, 20));
        txtSerie.setMinimumSize(new java.awt.Dimension(40, 20));
        txtSerie.setPreferredSize(new java.awt.Dimension(40, 20));

        txtNumero.setMaximumSize(new java.awt.Dimension(70, 20));
        txtNumero.setMinimumSize(new java.awt.Dimension(70, 20));
        txtNumero.setPreferredSize(new java.awt.Dimension(70, 20));

        btnBuscar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnImprimir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        labelTipo1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelTipo1.setText("Doc :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTipo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelTicket)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImprimir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiar)
                    .addComponent(btnImprimir)
                    .addComponent(btnBuscar)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTicket)
                    .addComponent(jcbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTipo1)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnAnular.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAnular.setText("Anular");
        btnAnular.setName(""); // NOI18N
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAnular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTotal)
                    .addComponent(btnAnular))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadComponentes(){
        String path = new File ("").getAbsolutePath();
        path = path+"\\img\\";
        this.setTitle("DeMaTicket - Busqueda");
        //this.setIconImage(new ImageIcon(path+"logowindow.png").getImage());
        
        if(UsuarioData.getUsuario().getEmpresa().equals("1")){
           this.setIconImage(new ImageIcon(path+"logowindow.png").getImage());
        }
        if(UsuarioData.getUsuario().getEmpresa().equals("2")){
           this.setIconImage(new ImageIcon(path+"logowindowCrisol.png").getImage());           
        }   
        
        modelo = new DefaultTableModel(
            new Object [][] {
            },
            new Object [] {
                "TIPO","PRECIO UNIT.", "CANTIDAD", "SUBTOTAL"
            });       
        jTable1.setModel(modelo);
        btnImprimir.setEnabled(false);
        btnAnular.setEnabled(false);
        for(DocumentosVO temp: DocumentosDAO.consultarDocumentos()){
            jcbTipoDocumento.addItem(temp.getTIPODOCUMENTO() + " - " + temp.getDOCUMENTO());
        }
    }
    
    private void imprimir(boolean copia){
        try{
            int limit = Util.getLimitLine();
            String[] dataCabecera = cabecera.split("\\"+Util.FILE_DELIMITADOR);
            DirectPrinterT88V printer = new DirectPrinterT88V();
            printer.initialize();
            printer.setCondensedHib(1);
            printer.setCenterAlignCommand();
            printer.setBoldOn();
            printer.println(" DERRAMA MAGISTERIAL");
            printer.setBoldOff();
            printer.println("Av.Gregorio Escobedo 598 Jesus Maria");
            printer.println(SesionData.getSesion().getCompania());
            printer.println(SesionData.getSesion().getDireccionCompania());
            printer.println("RUC: 20136424867");
            printer.printLine();
            printer.setBoldOn();
            if(dataCabecera[17].compareTo("ANULADO")==0){
                printer.println(" ANULADO ");
                printer.printLine();
            }
            printer.println(" SERIE No: " + Util.completarIzquierda(3, SesionData.getSesion().getSerial(), "0" ) );
            printer.println(" TICKET No: " + Util.completarIzquierda(8,dataCabecera[7]+"", "0") +" - "+Util.completarIzquierda(8,dataCabecera[8]+"", "0"));
            printer.println("FECHA: " + dataCabecera[9]);
            printer.setBoldOff();
            printer.printLine();
            printer.setLeftAlignCommand();
            printer.println(Util.completarDerecha(limit,"CLIENTE: " + dataCabecera[30]));
            if(dataCabecera.length>32){
                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + dataCabecera[32] ));
            }else{
                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + "" ));
            }
            if(dataCabecera.length>33){
                printer.println(Util.completarDerecha(limit,"DIRECCION: " + dataCabecera[33] ));
            }else{
                printer.println(Util.completarDerecha(limit,"DIRECCION: " + "" ));
            }
            printer.setCenterAlignCommand();
            printer.printLine();
            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
                printer.println("CODIGO           CONCEPTO          P.UNIT.  CANT  TOTAL");
            }
            if(SesionData.getSesion().getModelo().trim().compareTo("TM-U220")==0){
                printer.println("CODIGO    CONCEPTO   P.UNIT. CANT  TOTAL");
            }
            printer.printLine();
            printer.setLeftAlignCommand();
            for(String temp :detalle){
                String[] dataDetalle = temp.split("\\"+Util.FILE_DELIMITADOR);
                if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
                    printer.println(
                            Util.completarIzquierda(8, dataDetalle[5]+"") + 
                            " "+Util.completarDerecha(24, dataDetalle[6]) + 
                            Util.completarIzquierda(7, Util.formatDecimal(Double.parseDouble(dataDetalle[9]))) + 
                            Util.completarIzquierda(6, dataDetalle[8]+"") + 
                            Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(dataDetalle[18])))
                    );
                }
                if(SesionData.getSesion().getModelo().trim().compareTo("TM-U220")==0){
                    printer.println(
                            Util.completarIzquierda(8, dataDetalle[5]+"") + 
                            " "+Util.completarDerecha(13, dataDetalle[6]) + 
                            Util.completarIzquierda(6, Util.formatDecimal(Double.parseDouble(dataDetalle[9]))) + 
                            Util.completarIzquierda(5, dataDetalle[8]+"") + 
                            Util.completarIzquierda(7, Util.formatDecimal(Double.parseDouble(dataDetalle[18])))
                    );
                }
            }
            printer.printLine();
            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
                printer.setRightAlignCommand();
            }
            double subtotal = Double.parseDouble(dataCabecera[26])-Double.parseDouble(dataCabecera[23]);
            printer.println(
                    Util.completarIzquierda(limit,
                    "SUB TOTAL S/. " + Util.completarIzquierda(8, Util.formatDecimal(subtotal))));
            printer.println(
                    Util.completarIzquierda(limit,
                    "IGV S/. " + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(dataCabecera[23])))));
            printer.println(Util.completarIzquierda(limit,"---------------------"));
            printer.println(
                    Util.completarIzquierda(limit,
                    "TOTAL S/. " + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(dataCabecera[26])))));
            printer.printLine();
            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
                printer.setCenterAlignCommand();
            }
            printer.println("Cajero: "+dataCabecera[10]);
            printer.println(Util.obtieneFechaDiaHora());
            printer.printLine();
            if(copia){
                printer.println("*** Copia ***");
            }
            printer.println("    \n");
            printer.println("    \n");
            printer.println("    \n");
            printer.println("    \n");
            printer.println("    \n");
            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
                printer.setCute();
            }
            printer.printHibrida(SesionData.getSesion().getImpresora()); 
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        //jcastillo inicio
        txtSerie.setText(txtSerie.getText().toUpperCase());
        txtNumero.setText(Util.completarIzquierda(7,txtNumero.getText(), "0"));
        //jcastillo fin
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
        /*cabecera = buscaCabecera();
        if(cabecera.compareTo("")==0) return;
        detalle = buscaDetalle();
        for(String temp:detalle){
            String[] dataDetalle = temp.split("\\"+Util.FILE_DELIMITADOR);
            Object [] object = new Object[]{
                dataDetalle[6],
                dataDetalle[9],
                dataDetalle[8],
                dataDetalle[18]};
            modelo.addRow(object);
        }
        String[] dataCabecera = cabecera.split("\\"+Util.FILE_DELIMITADOR);
        lblTotal.setText(dataCabecera[26]);*/
        VentasCabeceraVO ventasCabeceraVO = buscaCabeceraBD();
        ArrayList<VentasDetalleVO> ventasDetalleVOList=null;
        
        if(ventasCabeceraVO == null){
            JOptionPane.showMessageDialog(null, "EL TICKET NO EXISTE O SE ENCUENTRA ANULADO", "DeMaTicket",JOptionPane.WARNING_MESSAGE);
            return;
        }
        ventasDetalleVOList = buscaDetalleBD();
        for(VentasDetalleVO temp:ventasDetalleVOList){
            Object [] object = new Object[]{
                temp.getDESCON(),
                temp.getDFACPREUMO(),
                temp.getCANTIDAD(),
                temp.getDFACVTOTMO()};
            modelo.addRow(object);
        }
        lblTotal.setText(ventasCabeceraVO.getFACTOTMO().toString());
        btnImprimir.setEnabled(true);
        //jcastillo inicio
        btnAnular.setEnabled(true);
        //btnAnular.setEnabled(false);
        //jcastillo fin
    }//GEN-LAST:event_btnBuscarActionPerformed
  
    private String buscaCabecera(){
        File fileCab = null;
        String impresion = "";
        try{
            fileCab = Util.validaArchivoTicket(TipoArchivo.DM.getTipo());
            ArrayList<String> texto = new ArrayList();
            if(fileCab==null){
                JOptionPane.showMessageDialog(null, "NO SE ENCUENTRA CON INFORMACIÓN DEL TICKET");
                return impresion;
            }
            BufferedReader br = new BufferedReader(new FileReader(fileCab));
            String line = br.readLine();
            while (line != null) {
                if(line!=null && line.trim().compareTo("")!=0){
                    String[] data = line.split("\\"+Util.FILE_DELIMITADOR);
                    //jcastillo inicio
//                    if(Integer.parseInt(data[7].trim()) == Integer.parseInt(txtSerie.getText().trim()) &&
//                            Integer.parseInt(data[8].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
                    if(data[7].trim().equals(txtSerie.getText().trim()) &&
                            Integer.parseInt(data[8].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
                    //jcastillo fin
                        impresion = line;
                        break;
                    }
                    texto.add(line);
                }
                line = br.readLine();
            }
            br.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return impresion;
    }
    private VentasCabeceraVO buscaCabeceraBD(){
        DbConnection conex= new DbConnection();
        VentasCabeceraVO ventasCabeceraVO = null;
        try{
            PreparedStatement consulta = conex.getConnection().prepareStatement("SELECT IDCOMPANIA,IDLOCALIDAD,TINID,ALMACEN,LISTAPRECIOS,CODIGOCLIENTE,CLASEAUX,CLIERUC,SERIE,NUMERO, " +
                "FECHAPROCESO,VEID,FORMAPAGO,TIPOMONEDA,TIPOVENTA,FACMTOMO,FACMTOMN,FACMTOME,FACESTADO,FACDCTOMO, " +
                "FACDCTOMN,FACDCTOME,FACUSER,FACFREG,FACHREG,FACANOMES,FACTCAM,FACFLAGD,FACIGVMO,FACIGVMN,FACIGVME, " +
                "FACISCMO,FACISCMN,FACISCME,FACTOTMO,FACTOTMN,FACTOTME,FACTIP,TIPODOCUMENTO,TIPPERID,FACDSCTO1, " +
                "FACIMPREP,FACFEVCMTO,FACTCLI,FACTDES,CLIEDIR,TIPOADQ,FACIGV2MN,FACIGV2ME,FACIGV2MO,INICIAL, " +
                "FACSERMO,FACSERMN,FACSERME,PORIGV,PORSER " +
                "FROM DMTICKET.DMT_VENTAS_CAB WHERE SERIE=? AND NUMERO=? AND FACESTADO=?");
            consulta.setString(1, txtSerie.getText().trim());
            consulta.setInt(2, Integer.parseInt(txtNumero.getText().trim()));
            consulta.setString(3, "ACEPTADO");
            ResultSet res = consulta.executeQuery();
            if(res.next()){
                ventasCabeceraVO = new VentasCabeceraVO();
                ventasCabeceraVO.setIDCOMPANIA(res.getString("IDCOMPANIA"));
                ventasCabeceraVO.setIDLOCALIDAD(res.getString("IDLOCALIDAD"));
                ventasCabeceraVO.setTINID(res.getString("TINID"));
                ventasCabeceraVO.setALMACEN(res.getString("ALMACEN"));
                ventasCabeceraVO.setLISTAPRECIOS(res.getString("LISTAPRECIOS"));
                ventasCabeceraVO.setCODIGOCLIENTE(res.getString("CODIGOCLIENTE"));
                ventasCabeceraVO.setCLASEAUX(res.getString("CLASEAUX"));
                ventasCabeceraVO.setCLIERUC(res.getString("CLIERUC"));
                ventasCabeceraVO.setSERIE(res.getString("SERIE"));
                ventasCabeceraVO.setNUMERO(res.getString("NUMERO"));
                ventasCabeceraVO.setFECHAPROCESO(res.getString("FECHAPROCESO"));
                ventasCabeceraVO.setVEID(res.getString("VEID"));
                ventasCabeceraVO.setFORMAPAGO(res.getString("FORMAPAGO"));
                ventasCabeceraVO.setTIPOMONEDA(res.getString("TIPOMONEDA"));
                ventasCabeceraVO.setTIPOVENTA(res.getString("TIPOVENTA"));
                ventasCabeceraVO.setFACMTOMO(res.getBigDecimal("FACMTOMO"));
                ventasCabeceraVO.setFACMTOMN(res.getBigDecimal("FACMTOMN"));
                ventasCabeceraVO.setFACMTOME(res.getBigDecimal("FACMTOME"));
                ventasCabeceraVO.setFACESTADO(res.getString("FACESTADO"));
                ventasCabeceraVO.setFACDCTOMO(res.getBigDecimal("FACDCTOMO"));
                ventasCabeceraVO.setFACDCTOMN(res.getBigDecimal("FACDCTOMN"));
                ventasCabeceraVO.setFACDCTOME(res.getBigDecimal("FACDCTOME"));
                ventasCabeceraVO.setFACUSER(res.getString("FACUSER"));
                ventasCabeceraVO.setFACFREG(res.getString("FACFREG"));
                ventasCabeceraVO.setFACHREG(res.getString("FACHREG"));
                ventasCabeceraVO.setFACANOMES(res.getString("FACANOMES"));
                ventasCabeceraVO.setFACTCAM(res.getBigDecimal("FACTCAM"));
                ventasCabeceraVO.setFACFLAGD(res.getString("FACFLAGD"));
                ventasCabeceraVO.setFACIGVMO(res.getBigDecimal("FACIGVMO"));
                ventasCabeceraVO.setFACIGVMN(res.getBigDecimal("FACIGVMN"));
                ventasCabeceraVO.setFACIGVME(res.getBigDecimal("FACIGVME"));
                ventasCabeceraVO.setFACISCMO(res.getBigDecimal("FACISCMO"));
                ventasCabeceraVO.setFACISCMN(res.getBigDecimal("FACISCMN"));
                ventasCabeceraVO.setFACISCME(res.getBigDecimal("FACISCME"));
                ventasCabeceraVO.setFACTOTMO(res.getBigDecimal("FACTOTMO"));
                ventasCabeceraVO.setFACTOTMN(res.getBigDecimal("FACTOTMN"));
                ventasCabeceraVO.setFACTOTME(res.getBigDecimal("FACTOTME"));
                ventasCabeceraVO.setFACTIP(res.getString("FACTIP"));
                ventasCabeceraVO.setTIPODOCUMENTO(res.getString("TIPODOCUMENTO"));
                ventasCabeceraVO.setTIPPERID(res.getString("TIPPERID"));
                ventasCabeceraVO.setFACDSCTO1(res.getBigDecimal("FACDSCTO1"));
                ventasCabeceraVO.setFACIMPREP(res.getString("FACIMPREP"));
                ventasCabeceraVO.setFACFEVCMTO(res.getString("FACFEVCMTO"));
                ventasCabeceraVO.setFACTCLI(res.getString("FACTCLI"));
                ventasCabeceraVO.setFACTDES(res.getString("FACTDES"));
                ventasCabeceraVO.setCLIEDIR(res.getString("CLIEDIR"));
                ventasCabeceraVO.setTIPOADQ(res.getString("TIPOADQ"));
                ventasCabeceraVO.setFACIGV2MN(res.getBigDecimal("FACIGV2MN"));
                ventasCabeceraVO.setFACIGV2ME(res.getBigDecimal("FACIGV2ME"));
                ventasCabeceraVO.setFACIGV2MO(res.getBigDecimal("FACIGV2MO"));
                ventasCabeceraVO.setINICIAL(res.getBigDecimal("INICIAL"));
                ventasCabeceraVO.setFACSERMO(res.getBigDecimal("FACSERMO"));
                ventasCabeceraVO.setFACSERMN(res.getBigDecimal("FACSERMN"));
                ventasCabeceraVO.setFACSERME(res.getBigDecimal("FACSERME"));
                ventasCabeceraVO.setPORIGV(res.getBigDecimal("PORIGV"));
                ventasCabeceraVO.setPORSER(res.getBigDecimal("PORSER"));
            }
            res.close();
            consulta.close();
            conex.desconectar();
        }catch(Exception ex){
            conex.desconectar();
            ex.printStackTrace();
        }
        return ventasCabeceraVO;
    }
    
    private ArrayList<String> buscaDetalle(){
        File fileCab = null;
        ArrayList<String> impresion = new ArrayList();
        int numero = 0;
        int numeroEval = 0;
        try{
            fileCab = Util.validaArchivoTicket(TipoArchivo.DMD.getTipo());
            if(fileCab==null){
                JOptionPane.showMessageDialog(null, "NO SE ENCUENTRA CON INFORMACIÓN DEL TICKET");
                return impresion;
            }
            BufferedReader br = new BufferedReader(new FileReader(fileCab));
            String line = br.readLine();
            while (line != null) {
                if(line!=null && line.trim().compareTo("")!=0){
                    String[] data = line.split("\\"+Util.FILE_DELIMITADOR);
                    numeroEval = Integer.parseInt(data[3].trim());
                    //jcastillo inicio
//                    if(Integer.parseInt(data[2].trim()) == Integer.parseInt(txtSerie.getText().trim()) &&
//                            Integer.parseInt(data[3].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
                    if(data[2].trim().equals(txtSerie.getText().trim()) &&
                            Integer.parseInt(data[3].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
                    //jcastillo fin
                        impresion.add(line);
                        numero = Integer.parseInt(data[3].trim());
                    }
                    if(numero>0 && numero!=numeroEval){
                        break;
                    }
                }
                line = br.readLine();
            }
            br.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return impresion;
    }
    private ArrayList<VentasDetalleVO> buscaDetalleBD(){
        ArrayList<VentasDetalleVO> ventasDetalleVOList = new ArrayList();
        DbConnection conex= new DbConnection();
        VentasDetalleVO ventasDetalleVO = null;
        try{
            String valor =jcbTipoDocumento.getSelectedItem().toString();            
            String valorSeleccionado[] = valor.split(" - ");
            String tipo= valorSeleccionado[0];
        
            PreparedStatement consulta = conex.getConnection().prepareStatement("SELECT IDCOMPANIA,TIPODOCUMENTO,SERIE,NUMERO,NUMREG,CODCON,DESCON,UNIDADMEDIDA,CANTIDAD,DFACPREUMO, " +
                "DFACPREUMN,DFACPREUME,DFACMTOMO,DFACMTOMN,DFACMTOME,FECHVTA,DFACIMP1,DFACIMPMTO1,DFACVTOTMO,DFACVTOTMN, " +
                "DFACVTOTME,DFACTFLAG " +
                "FROM DMTICKET.DMT_VENTAS_DET WHERE SERIE=? AND NUMERO=? AND TIPODOCUMENTO=?");
            consulta.setString(1, txtSerie.getText().trim());
            consulta.setInt(2, Integer.parseInt(txtNumero.getText().trim()));
            consulta.setString(3, tipo);
            ResultSet res = consulta.executeQuery();
            while(res.next()){
                ventasDetalleVO = new VentasDetalleVO();
                ventasDetalleVO.setIDCOMPANIA(res.getString("IDCOMPANIA"));
                ventasDetalleVO.setTIPODOCUMENTO(res.getString("TIPODOCUMENTO"));
                ventasDetalleVO.setSERIE(res.getString("SERIE"));
                ventasDetalleVO.setNUMERO(res.getString("NUMERO"));
                ventasDetalleVO.setNUMREG(res.getBigDecimal("NUMREG"));
                ventasDetalleVO.setCODCON(res.getString("CODCON"));
                ventasDetalleVO.setDESCON(res.getString("DESCON"));
                ventasDetalleVO.setUNIDADMEDIDA(res.getString("UNIDADMEDIDA"));
                ventasDetalleVO.setCANTIDAD(res.getBigDecimal("CANTIDAD"));
                ventasDetalleVO.setDFACPREUMO(res.getBigDecimal("DFACPREUMO"));
                ventasDetalleVO.setDFACPREUMN(res.getBigDecimal("DFACPREUMN"));
                ventasDetalleVO.setDFACPREUME(res.getBigDecimal("DFACPREUME"));
                ventasDetalleVO.setDFACMTOMO(res.getBigDecimal("DFACMTOMO"));
                ventasDetalleVO.setDFACMTOMN(res.getBigDecimal("DFACMTOMN"));
                ventasDetalleVO.setDFACMTOME(res.getBigDecimal("DFACMTOME"));
                ventasDetalleVO.setFECHVTA(res.getString("FECHVTA"));
                ventasDetalleVO.setDFACIMP1(res.getBigDecimal("DFACIMP1"));
                ventasDetalleVO.setDFACIMPMTO1(res.getBigDecimal("DFACIMPMTO1"));
                ventasDetalleVO.setDFACVTOTMO(res.getBigDecimal("DFACVTOTMO"));
                ventasDetalleVO.setDFACVTOTMN(res.getBigDecimal("DFACVTOTMN"));
                ventasDetalleVO.setDFACVTOTME(res.getBigDecimal("DFACVTOTME"));
                ventasDetalleVO.setDFACTFLAG(res.getString("DFACTFLAG"));
                ventasDetalleVOList.add(ventasDetalleVO);
            }
            res.close();
            consulta.close();
            conex.desconectar();
        }catch(Exception ex){
            conex.desconectar();
            ex.printStackTrace();
        }
        return ventasDetalleVOList;       
    }
    
    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        DbConnection conex= new DbConnection();
        int dialogButton = JOptionPane.showConfirmDialog (null, 
                "ESTA SEGURO QUE DESEA ANULAR EL TICKET "+
                txtSerie.getText()+" - " +txtNumero.getText()+
                "?", "CONFIRMACION", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(dialogButton == JOptionPane.YES_OPTION){
            try{
                PreparedStatement consulta = conex.getConnection().prepareStatement("UPDATE DMTICKET.DMT_VENTAS_CAB SET FACESTADO = ?, USUMOD=?, FECMOD=SYSDATE() WHERE "
                        + "SERIE = ? AND NUMERO = ?");
                consulta.setString(1,"ANULADO");
                consulta.setString(2,UsuarioData.getUsuario().getUsuario());
                consulta.setString(3,txtSerie.getText().trim());
                consulta.setInt(4,Integer.parseInt(txtNumero.getText().trim()));
                consulta.executeUpdate();          
                consulta.close();
                conex.desconectar();
                JOptionPane.showMessageDialog(null, "TICKET ANULADO CORRECTAMENTE");
                Limpiar();
            }catch(Exception ex){
                conex.desconectar();
                ex.printStackTrace();
            }
            /*File fileCab = null;
            boolean anula = false;
            String impresion = "";
            try{
                fileCab = Util.validaArchivoTicket(TipoArchivo.DM.getTipo());
                ArrayList<String> textoTurno = new ArrayList();
                ArrayList<String> textoHistorico = new ArrayList();
                if(fileCab==null){
                    JOptionPane.showMessageDialog(null, "NO SE ENCUENTRA CON INFORMACIÓN DEL TICKET");
                    return;
                }
                int serie  = Integer.parseInt(txtSerie.getText().trim());
                int numero = Integer.parseInt(txtNumero.getText().trim());
                BufferedReader br = null;
                String line = "";
                //Rutina Anula en Turnos
                br = new BufferedReader(new FileReader(fileCab));
                line = br.readLine();
                while (line != null) {
                    if(line!=null && line.trim().compareTo("")!=0){
                        String[] data = line.split("\\"+Util.FILE_DELIMITADOR);
                        if(Integer.parseInt(data[7].trim()) == serie && Integer.parseInt(data[8].trim()) == numero ){
                            line = line.replaceAll("\\|ACEPTADO\\|", "|ANULADO|");
                            impresion = line;
                            anula=true;
                        }
                        textoTurno.add(line);
                    }
                    line = br.readLine();
                }
                br.close();
                //Rutina Anula en Histórico
                String name = SesionData.getSesion().getIdcompania() + 
                        SesionData.getSesion().getTienda() + 
                        SesionData.getSesion().getPtoventa() + 
                        SesionData.getSesion().getFechaProceso().replaceAll("/", "");
                File fileCabHis = Util.validaArchivoTicket(TipoArchivo.DM.getTipo(), name);
                br = new BufferedReader(new FileReader(fileCabHis));
                line = br.readLine();
                while (line != null) {
                    if(line!=null && line.trim().compareTo("")!=0){
                        String[] data = line.split("\\"+Util.FILE_DELIMITADOR);
                        if(Integer.parseInt(data[7].trim()) == serie && Integer.parseInt(data[8].trim()) == numero ){
                            line = line.replaceAll("\\|ACEPTADO\\|", "|ANULADO|");
                            impresion = line;
                            anula=true;
                        }
                        textoHistorico.add(line);
                    }
                    line = br.readLine();
                }
                br.close();
                //Valida anulacion
                if (anula) {
                    FileWriter escribir = null;
                    //Rutina Anula en Turnos
                    try{
                        escribir = new FileWriter(fileCab);
                        for(String temp:textoTurno){
                            escribir.write(temp+"\n");
                        }
                    }catch(Exception ex){
                        ex.printStackTrace();
                    }finally{
                        escribir.close();
                    }
                    //Rutina Anula en Turnos
                    try{
                        escribir = new FileWriter(fileCabHis);
                        for(String temp:textoHistorico){
                            escribir.write(temp+"\n");
                        }
                    }catch(Exception ex){
                        ex.printStackTrace();
                    }finally{
                        escribir.close();
                    }
                    //Reimpre anulacion
                    String[] data = impresion.split("\\"+Util.FILE_DELIMITADOR);
                    int i=0;
                    while(i<SesionData.getSesion().getImpresiones()){
                        if(i==0){
                            imprimirAnulacion(false, data);
                        }else{
                            imprimirAnulacion(true, data);
                        }
                        i++;
                    }
                }
            }catch(Exception ex){
                ex.printStackTrace();
            }*/
            
        }
    }//GEN-LAST:event_btnAnularActionPerformed

    private void imprimirAnulacion(boolean copia, String[] data){
        try{
            int limit = Util.getLimitLine();
            DirectPrinterT88V printer = new DirectPrinterT88V();
            printer.initialize();
            printer.setCondensedHib(1);
            printer.setCenterAlignCommand();
            printer.setBoldOn();
            printer.println(" DERRAMA MAGISTERIAL");
            printer.setBoldOff();
            printer.println("Av.Gregorio Escobedo 598 Jesus Maria");
            printer.println(SesionData.getSesion().getCompania());
            printer.println(SesionData.getSesion().getDireccionCompania());
            printer.println("RUC: 20136424867");
            printer.printLine();
            printer.setBoldOn();
            printer.println(" ANULACION ");
            printer.printLine();
            printer.println(" SERIE No: " + Util.completarIzquierda(3, SesionData.getSesion().getSerial(), "0" ));
            printer.println(" TICKET No: " + data[7]+" - "+Util.completarIzquierda(8,data[8]+"", "0"));
            printer.println("FECHA: " + data[9]);
            printer.setBoldOff();
            printer.printLine();
            printer.setLeftAlignCommand();
            printer.println(Util.completarDerecha(limit,"CLIENTE: " + data[30]));
            if(data.length>32){
                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + data[32] ));
            }else{
                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + "" ));
            }
            if(data.length>33){
                printer.println(Util.completarDerecha(limit,"DIRECCION: " + data[33] ));
            }else{
                printer.println(Util.completarDerecha(limit,"DIRECCION: " + "" ));
            }
            printer.setCenterAlignCommand();
            printer.printLine();
            double subtotal = Double.parseDouble(data[26])-Double.parseDouble(data[23]);
            printer.println(
                    Util.completarIzquierda(limit,
                    "SUB TOTAL S/." + Util.completarIzquierda(8, Util.formatDecimal(subtotal))));
            printer.println(
                    Util.completarIzquierda(limit,
                    "IGV S/." + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(data[23])))));
            printer.println(Util.completarIzquierda(limit,"---------------------"));
            printer.println(
                    Util.completarIzquierda(limit,
                    "TOTAL S/." + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(data[26])))));
            printer.printLine();
            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
                printer.setCenterAlignCommand();
            }
            printer.println("Cajero: "+data[10]);
            printer.println(Util.obtieneFechaDiaHora());
            printer.printLine();
            if(copia){
                printer.println("*** Copia ***");
            }
            printer.println("    \n");
            printer.println("    \n");
            printer.println("    \n");
            printer.println("    \n");
            printer.println("    \n");
            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
                printer.setCute();
            }
            printer.printHibrida(SesionData.getSesion().getImpresora()); 
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        Limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    public void Limpiar(){
        txtSerie.setText("");
        txtNumero.setText("");
        //jcastillo inicio
        lblTotal.setText("");
        //jcastillo fin
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
        btnImprimir.setEnabled(false);
        btnAnular.setEnabled(false);    
    }
    
    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        int i=0;
        /*while(i<SesionData.getSesion().getImpresiones()){
            if(i==0){
                imprimir(false);
            }else{
                imprimir(true);
            }
            i++;
        }*/
       try{ 
        //File fileFELocal = Util.validaArchivoTicket(TipoArchivo.TXTLocal.getTipo());
        String valor =jcbTipoDocumento.getSelectedItem().toString();            
        String valorSeleccionado[] = valor.split(" - ");
        String tipo= valorSeleccionado[0];
        File fileFELocal = Util.buscarTicketaImprimir(TipoArchivo.TXTLocal.getTipo(), txtSerie.getText(), txtNumero.getText(),tipo);
        File destino = new File(SesionData.getSesion().getrutaFELocal());
        if(fileFELocal.exists()){
            Files.copy(Paths.get(fileFELocal.getPath()),Paths.get(destino.getPath()+"\\"+fileFELocal.getName()),
                        StandardCopyOption.REPLACE_EXISTING);            
        }else{
            Limpiar();
            JOptionPane.showMessageDialog(null, "NO SE PUEDE REIMPRIMIR EL TICKET, CONTACTE AL ADMINISTRADOR", "DeMaTicket",JOptionPane.ERROR_MESSAGE);
        }        
       }catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnImprimirActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox jcbTipoDocumento;
    private javax.swing.JLabel labelTicket;
    private javax.swing.JLabel labelTipo1;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JTextField lblTotal;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtSerie;
    // End of variables declaration//GEN-END:variables
}
