package com.dematicket.form;

import com.dematicket.data.UsuarioData;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author lmonge
 */
public class FormPasswordChange extends javax.swing.JFrame {
    String cabecera = "";
    ArrayList<String> detalle = new ArrayList();
    /**
     * Creates new form FormTicket
     */
    public FormPasswordChange() {
        initComponents();
        loadComponentes();        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userChangePass = new javax.swing.JTextField();
        currentPassChange = new javax.swing.JPasswordField();
        newPassChange = new javax.swing.JPasswordField();
        confirmPassChange = new javax.swing.JPasswordField();
        btnOKPassChange = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Enter username: ");

        jLabel2.setText("current password: ");

        jLabel3.setText("new password: ");

        jLabel4.setText("confirm password: ");

        userChangePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userChangePassActionPerformed(evt);
            }
        });

        btnOKPassChange.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnOKPassChange.setText("Cambiar");
        btnOKPassChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKPassChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnOKPassChange)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(currentPassChange, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userChangePass, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                .addComponent(newPassChange, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                .addComponent(confirmPassChange, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(4, 4, 4))))
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userChangePass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(currentPassChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(newPassChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(confirmPassChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnOKPassChange)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userChangePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userChangePassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userChangePassActionPerformed

    private void btnOKPassChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKPassChangeActionPerformed
        // TODO add your handling code here:
        if(newPassChange.getText().equals(confirmPassChange.getText())){
            UsuarioData.changePassBD(userChangePass.getText(), currentPassChange.getText(), newPassChange.getText());            
        }else{
            newPassChange.setText("");
            confirmPassChange.setText("");
            JOptionPane.showMessageDialog(null, "Los campos con la nueva clave no coinciden\n");
        }
    }//GEN-LAST:event_btnOKPassChangeActionPerformed

    private void loadComponentes(){
        //String path = new File ("").getAbsolutePath();
        //path = path+"\\img\\";
        this.setTitle("DmPos - Cambiar Contrase√±a");
        //this.setIconImage(new ImageIcon(path+"logowindow.png").getImage());         
        
    }
    
//    private void imprimir(boolean copia){
//        try{
//            int limit = Util.getLimitLine();
//            String[] dataCabecera = cabecera.split("\\"+Util.FILE_DELIMITADOR);
//            DirectPrinterT88V printer = new DirectPrinterT88V();
//            printer.initialize();
//            printer.setCondensedHib(1);
//            printer.setCenterAlignCommand();
//            printer.setBoldOn();
//            printer.println(" DERRAMA MAGISTERIAL");
//            printer.setBoldOff();
//            printer.println("Av.Gregorio Escobedo 598 Jesus Maria");
//            printer.println(SesionData.getSesion().getCompania());
//            printer.println(SesionData.getSesion().getDireccionCompania());
//            printer.println("RUC: 20136424867");
//            printer.printLine();
//            printer.setBoldOn();
//            if(dataCabecera[17].compareTo("ANULADO")==0){
//                printer.println(" ANULADO ");
//                printer.printLine();
//            }
//            printer.println(" SERIE No: " + Util.completarIzquierda(3, SesionData.getSesion().getSerial(), "0" ) );
//            printer.println(" TICKET No: " + Util.completarIzquierda(8,dataCabecera[7]+"", "0") +" - "+Util.completarIzquierda(8,dataCabecera[8]+"", "0"));
//            printer.println("FECHA: " + dataCabecera[9]);
//            printer.setBoldOff();
//            printer.printLine();
//            printer.setLeftAlignCommand();
//            printer.println(Util.completarDerecha(limit,"CLIENTE: " + dataCabecera[30]));
//            if(dataCabecera.length>32){
//                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + dataCabecera[32] ));
//            }else{
//                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + "" ));
//            }
//            if(dataCabecera.length>33){
//                printer.println(Util.completarDerecha(limit,"DIRECCION: " + dataCabecera[33] ));
//            }else{
//                printer.println(Util.completarDerecha(limit,"DIRECCION: " + "" ));
//            }
//            printer.setCenterAlignCommand();
//            printer.printLine();
//            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
//                printer.println("CODIGO           CONCEPTO          P.UNIT.  CANT  TOTAL");
//            }
//            if(SesionData.getSesion().getModelo().trim().compareTo("TM-U220")==0){
//                printer.println("CODIGO    CONCEPTO   P.UNIT. CANT  TOTAL");
//            }
//            printer.printLine();
//            printer.setLeftAlignCommand();
//            for(String temp :detalle){
//                String[] dataDetalle = temp.split("\\"+Util.FILE_DELIMITADOR);
//                if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
//                    printer.println(
//                            Util.completarIzquierda(8, dataDetalle[5]+"") + 
//                            " "+Util.completarDerecha(24, dataDetalle[6]) + 
//                            Util.completarIzquierda(7, Util.formatDecimal(Double.parseDouble(dataDetalle[9]))) + 
//                            Util.completarIzquierda(6, dataDetalle[8]+"") + 
//                            Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(dataDetalle[18])))
//                    );
//                }
//                if(SesionData.getSesion().getModelo().trim().compareTo("TM-U220")==0){
//                    printer.println(
//                            Util.completarIzquierda(8, dataDetalle[5]+"") + 
//                            " "+Util.completarDerecha(13, dataDetalle[6]) + 
//                            Util.completarIzquierda(6, Util.formatDecimal(Double.parseDouble(dataDetalle[9]))) + 
//                            Util.completarIzquierda(5, dataDetalle[8]+"") + 
//                            Util.completarIzquierda(7, Util.formatDecimal(Double.parseDouble(dataDetalle[18])))
//                    );
//                }
//            }
//            printer.printLine();
//            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
//                printer.setRightAlignCommand();
//            }
//            double subtotal = Double.parseDouble(dataCabecera[26])-Double.parseDouble(dataCabecera[23]);
//            printer.println(
//                    Util.completarIzquierda(limit,
//                    "SUB TOTAL S/. " + Util.completarIzquierda(8, Util.formatDecimal(subtotal))));
//            printer.println(
//                    Util.completarIzquierda(limit,
//                    "IGV S/. " + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(dataCabecera[23])))));
//            printer.println(Util.completarIzquierda(limit,"---------------------"));
//            printer.println(
//                    Util.completarIzquierda(limit,
//                    "TOTAL S/. " + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(dataCabecera[26])))));
//            printer.printLine();
//            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
//                printer.setCenterAlignCommand();
//            }
//            printer.println("Cajero: "+dataCabecera[10]);
//            printer.println(Util.obtieneFechaDiaHora());
//            printer.printLine();
//            if(copia){
//                printer.println("*** Copia ***");
//            }
//            printer.println("    \n");
//            printer.println("    \n");
//            printer.println("    \n");
//            printer.println("    \n");
//            printer.println("    \n");
//            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
//                printer.setCute();
//            }
//            printer.printHibrida(SesionData.getSesion().getImpresora()); 
//        }catch(Exception ex){
//            ex.printStackTrace();
//        }
//    }
      
//    private String buscaCabecera(){
//        File fileCab = null;
//        String impresion = "";
//        try{
//            fileCab = Util.validaArchivoTicket(TipoArchivo.DM.getTipo());
//            ArrayList<String> texto = new ArrayList();
//            if(fileCab==null){
//                JOptionPane.showMessageDialog(null, "NO SE ENCUENTRA CON INFORMACI√ìN DEL TICKET");
//                return impresion;
//            }
//            BufferedReader br = new BufferedReader(new FileReader(fileCab));
//            String line = br.readLine();
//            while (line != null) {
//                if(line!=null && line.trim().compareTo("")!=0){
//                    String[] data = line.split("\\"+Util.FILE_DELIMITADOR);
//                    //jcastillo inicio
////                    if(Integer.parseInt(data[7].trim()) == Integer.parseInt(txtSerie.getText().trim()) &&
////                            Integer.parseInt(data[8].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
//                    if(data[7].trim().equals(txtSerie.getText().trim()) &&
//                            Integer.parseInt(data[8].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
//                    //jcastillo fin
//                        impresion = line;
//                        break;
//                    }
//                    texto.add(line);
//                }
//                line = br.readLine();
//            }
//            br.close();
//        }catch(Exception ex){
//            ex.printStackTrace();
//        }
//        return impresion;
//    }
//    private VentasCabeceraVO buscaCabeceraBD(){
//        DbConnection conex= new DbConnection();
//        VentasCabeceraVO ventasCabeceraVO = null;
//        try{
//            PreparedStatement consulta = conex.getConnection().prepareStatement("SELECT IDCOMPANIA,IDLOCALIDAD,TINID,ALMACEN,LISTAPRECIOS,CODIGOCLIENTE,CLASEAUX,CLIERUC,SERIE,NUMERO, " +
//                "FECHAPROCESO,VEID,FORMAPAGO,TIPOMONEDA,TIPOVENTA,FACMTOMO,FACMTOMN,FACMTOME,FACESTADO,FACDCTOMO, " +
//                "FACDCTOMN,FACDCTOME,FACUSER,FACFREG,FACHREG,FACANOMES,FACTCAM,FACFLAGD,FACIGVMO,FACIGVMN,FACIGVME, " +
//                "FACISCMO,FACISCMN,FACISCME,FACTOTMO,FACTOTMN,FACTOTME,FACTIP,TIPODOCUMENTO,TIPPERID,FACDSCTO1, " +
//                "FACIMPREP,FACFEVCMTO,FACTCLI,FACTDES,CLIEDIR,TIPOADQ,FACIGV2MN,FACIGV2ME,FACIGV2MO,INICIAL, " +
//                "FACSERMO,FACSERMN,FACSERME,PORIGV,PORSER " +
//                "FROM DMTICKET.DMT_VENTAS_CAB WHERE SERIE=? AND NUMERO=? AND FACESTADO=?");
//            consulta.setString(1, txtSerie.getText().trim());
//            consulta.setInt(2, Integer.parseInt(txtNumero.getText().trim()));
//            consulta.setString(3, "ACEPTADO");
//            ResultSet res = consulta.executeQuery();
//            if(res.next()){
//                ventasCabeceraVO = new VentasCabeceraVO();
//                ventasCabeceraVO.setIDCOMPANIA(res.getString("IDCOMPANIA"));
//                ventasCabeceraVO.setIDLOCALIDAD(res.getString("IDLOCALIDAD"));
//                ventasCabeceraVO.setTINID(res.getString("TINID"));
//                ventasCabeceraVO.setALMACEN(res.getString("ALMACEN"));
//                ventasCabeceraVO.setLISTAPRECIOS(res.getString("LISTAPRECIOS"));
//                ventasCabeceraVO.setCODIGOCLIENTE(res.getString("CODIGOCLIENTE"));
//                ventasCabeceraVO.setCLASEAUX(res.getString("CLASEAUX"));
//                ventasCabeceraVO.setCLIERUC(res.getString("CLIERUC"));
//                ventasCabeceraVO.setSERIE(res.getString("SERIE"));
//                ventasCabeceraVO.setNUMERO(res.getString("NUMERO"));
//                ventasCabeceraVO.setFECHAPROCESO(res.getString("FECHAPROCESO"));
//                ventasCabeceraVO.setVEID(res.getString("VEID"));
//                ventasCabeceraVO.setFORMAPAGO(res.getString("FORMAPAGO"));
//                ventasCabeceraVO.setTIPOMONEDA(res.getString("TIPOMONEDA"));
//                ventasCabeceraVO.setTIPOVENTA(res.getString("TIPOVENTA"));
//                ventasCabeceraVO.setFACMTOMO(res.getBigDecimal("FACMTOMO"));
//                ventasCabeceraVO.setFACMTOMN(res.getBigDecimal("FACMTOMN"));
//                ventasCabeceraVO.setFACMTOME(res.getBigDecimal("FACMTOME"));
//                ventasCabeceraVO.setFACESTADO(res.getString("FACESTADO"));
//                ventasCabeceraVO.setFACDCTOMO(res.getBigDecimal("FACDCTOMO"));
//                ventasCabeceraVO.setFACDCTOMN(res.getBigDecimal("FACDCTOMN"));
//                ventasCabeceraVO.setFACDCTOME(res.getBigDecimal("FACDCTOME"));
//                ventasCabeceraVO.setFACUSER(res.getString("FACUSER"));
//                ventasCabeceraVO.setFACFREG(res.getString("FACFREG"));
//                ventasCabeceraVO.setFACHREG(res.getString("FACHREG"));
//                ventasCabeceraVO.setFACANOMES(res.getString("FACANOMES"));
//                ventasCabeceraVO.setFACTCAM(res.getBigDecimal("FACTCAM"));
//                ventasCabeceraVO.setFACFLAGD(res.getString("FACFLAGD"));
//                ventasCabeceraVO.setFACIGVMO(res.getBigDecimal("FACIGVMO"));
//                ventasCabeceraVO.setFACIGVMN(res.getBigDecimal("FACIGVMN"));
//                ventasCabeceraVO.setFACIGVME(res.getBigDecimal("FACIGVME"));
//                ventasCabeceraVO.setFACISCMO(res.getBigDecimal("FACISCMO"));
//                ventasCabeceraVO.setFACISCMN(res.getBigDecimal("FACISCMN"));
//                ventasCabeceraVO.setFACISCME(res.getBigDecimal("FACISCME"));
//                ventasCabeceraVO.setFACTOTMO(res.getBigDecimal("FACTOTMO"));
//                ventasCabeceraVO.setFACTOTMN(res.getBigDecimal("FACTOTMN"));
//                ventasCabeceraVO.setFACTOTME(res.getBigDecimal("FACTOTME"));
//                ventasCabeceraVO.setFACTIP(res.getString("FACTIP"));
//                ventasCabeceraVO.setTIPODOCUMENTO(res.getString("TIPODOCUMENTO"));
//                ventasCabeceraVO.setTIPPERID(res.getString("TIPPERID"));
//                ventasCabeceraVO.setFACDSCTO1(res.getBigDecimal("FACDSCTO1"));
//                ventasCabeceraVO.setFACIMPREP(res.getString("FACIMPREP"));
//                ventasCabeceraVO.setFACFEVCMTO(res.getString("FACFEVCMTO"));
//                ventasCabeceraVO.setFACTCLI(res.getString("FACTCLI"));
//                ventasCabeceraVO.setFACTDES(res.getString("FACTDES"));
//                ventasCabeceraVO.setCLIEDIR(res.getString("CLIEDIR"));
//                ventasCabeceraVO.setTIPOADQ(res.getString("TIPOADQ"));
//                ventasCabeceraVO.setFACIGV2MN(res.getBigDecimal("FACIGV2MN"));
//                ventasCabeceraVO.setFACIGV2ME(res.getBigDecimal("FACIGV2ME"));
//                ventasCabeceraVO.setFACIGV2MO(res.getBigDecimal("FACIGV2MO"));
//                ventasCabeceraVO.setINICIAL(res.getBigDecimal("INICIAL"));
//                ventasCabeceraVO.setFACSERMO(res.getBigDecimal("FACSERMO"));
//                ventasCabeceraVO.setFACSERMN(res.getBigDecimal("FACSERMN"));
//                ventasCabeceraVO.setFACSERME(res.getBigDecimal("FACSERME"));
//                ventasCabeceraVO.setPORIGV(res.getBigDecimal("PORIGV"));
//                ventasCabeceraVO.setPORSER(res.getBigDecimal("PORSER"));
//            }
//            res.close();
//            consulta.close();
//            conex.desconectar();
//        }catch(Exception ex){
//            conex.desconectar();
//            ex.printStackTrace();
//        }
//        return ventasCabeceraVO;
//    }
    
//    private ArrayList<String> buscaDetalle(){
//        File fileCab = null;
//        ArrayList<String> impresion = new ArrayList();
//        int numero = 0;
//        int numeroEval = 0;
//        try{
//            fileCab = Util.validaArchivoTicket(TipoArchivo.DMD.getTipo());
//            if(fileCab==null){
//                JOptionPane.showMessageDialog(null, "NO SE ENCUENTRA CON INFORMACI√ìN DEL TICKET");
//                return impresion;
//            }
//            BufferedReader br = new BufferedReader(new FileReader(fileCab));
//            String line = br.readLine();
//            while (line != null) {
//                if(line!=null && line.trim().compareTo("")!=0){
//                    String[] data = line.split("\\"+Util.FILE_DELIMITADOR);
//                    numeroEval = Integer.parseInt(data[3].trim());
//                    //jcastillo inicio
////                    if(Integer.parseInt(data[2].trim()) == Integer.parseInt(txtSerie.getText().trim()) &&
////                            Integer.parseInt(data[3].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
//                    if(data[2].trim().equals(txtSerie.getText().trim()) &&
//                            Integer.parseInt(data[3].trim()) == Integer.parseInt(txtNumero.getText().trim()) ){
//                    //jcastillo fin
//                        impresion.add(line);
//                        numero = Integer.parseInt(data[3].trim());
//                    }
//                    if(numero>0 && numero!=numeroEval){
//                        break;
//                    }
//                }
//                line = br.readLine();
//            }
//            br.close();
//        }catch(Exception ex){
//            ex.printStackTrace();
//        }
//        return impresion;
//    }
//    private ArrayList<VentasDetalleVO> buscaDetalleBD(){
//        ArrayList<VentasDetalleVO> ventasDetalleVOList = new ArrayList();
//        DbConnection conex= new DbConnection();
//        VentasDetalleVO ventasDetalleVO = null;
//        try{
//            String valor =jcbTipoDocumento.getSelectedItem().toString();            
//            String valorSeleccionado[] = valor.split(" - ");
//            String tipo= valorSeleccionado[0];
//        
//            PreparedStatement consulta = conex.getConnection().prepareStatement("SELECT IDCOMPANIA,TIPODOCUMENTO,SERIE,NUMERO,NUMREG,CODCON,DESCON,UNIDADMEDIDA,CANTIDAD,DFACPREUMO, " +
//                "DFACPREUMN,DFACPREUME,DFACMTOMO,DFACMTOMN,DFACMTOME,FECHVTA,DFACIMP1,DFACIMPMTO1,DFACVTOTMO,DFACVTOTMN, " +
//                "DFACVTOTME,DFACTFLAG " +
//                "FROM DMTICKET.DMT_VENTAS_DET WHERE SERIE=? AND NUMERO=? AND TIPODOCUMENTO=?");
//            consulta.setString(1, txtSerie.getText().trim());
//            consulta.setInt(2, Integer.parseInt(txtNumero.getText().trim()));
//            consulta.setString(3, tipo);
//            ResultSet res = consulta.executeQuery();
//            while(res.next()){
//                ventasDetalleVO = new VentasDetalleVO();
//                ventasDetalleVO.setIDCOMPANIA(res.getString("IDCOMPANIA"));
//                ventasDetalleVO.setTIPODOCUMENTO(res.getString("TIPODOCUMENTO"));
//                ventasDetalleVO.setSERIE(res.getString("SERIE"));
//                ventasDetalleVO.setNUMERO(res.getString("NUMERO"));
//                ventasDetalleVO.setNUMREG(res.getBigDecimal("NUMREG"));
//                ventasDetalleVO.setCODCON(res.getString("CODCON"));
//                ventasDetalleVO.setDESCON(res.getString("DESCON"));
//                ventasDetalleVO.setUNIDADMEDIDA(res.getString("UNIDADMEDIDA"));
//                ventasDetalleVO.setCANTIDAD(res.getBigDecimal("CANTIDAD"));
//                ventasDetalleVO.setDFACPREUMO(res.getBigDecimal("DFACPREUMO"));
//                ventasDetalleVO.setDFACPREUMN(res.getBigDecimal("DFACPREUMN"));
//                ventasDetalleVO.setDFACPREUME(res.getBigDecimal("DFACPREUME"));
//                ventasDetalleVO.setDFACMTOMO(res.getBigDecimal("DFACMTOMO"));
//                ventasDetalleVO.setDFACMTOMN(res.getBigDecimal("DFACMTOMN"));
//                ventasDetalleVO.setDFACMTOME(res.getBigDecimal("DFACMTOME"));
//                ventasDetalleVO.setFECHVTA(res.getString("FECHVTA"));
//                ventasDetalleVO.setDFACIMP1(res.getBigDecimal("DFACIMP1"));
//                ventasDetalleVO.setDFACIMPMTO1(res.getBigDecimal("DFACIMPMTO1"));
//                ventasDetalleVO.setDFACVTOTMO(res.getBigDecimal("DFACVTOTMO"));
//                ventasDetalleVO.setDFACVTOTMN(res.getBigDecimal("DFACVTOTMN"));
//                ventasDetalleVO.setDFACVTOTME(res.getBigDecimal("DFACVTOTME"));
//                ventasDetalleVO.setDFACTFLAG(res.getString("DFACTFLAG"));
//                ventasDetalleVOList.add(ventasDetalleVO);
//            }
//            res.close();
//            consulta.close();
//            conex.desconectar();
//        }catch(Exception ex){
//            conex.desconectar();
//            ex.printStackTrace();
//        }
//        return ventasDetalleVOList;       
//    }
    
//    private void imprimirAnulacion(boolean copia, String[] data){
//        try{
//            int limit = Util.getLimitLine();
//            DirectPrinterT88V printer = new DirectPrinterT88V();
//            printer.initialize();
//            printer.setCondensedHib(1);
//            printer.setCenterAlignCommand();
//            printer.setBoldOn();
//            printer.println(" DERRAMA MAGISTERIAL");
//            printer.setBoldOff();
//            printer.println("Av.Gregorio Escobedo 598 Jesus Maria");
//            printer.println(SesionData.getSesion().getCompania());
//            printer.println(SesionData.getSesion().getDireccionCompania());
//            printer.println("RUC: 20136424867");
//            printer.printLine();
//            printer.setBoldOn();
//            printer.println(" ANULACION ");
//            printer.printLine();
//            printer.println(" SERIE No: " + Util.completarIzquierda(3, SesionData.getSesion().getSerial(), "0" ));
//            printer.println(" TICKET No: " + data[7]+" - "+Util.completarIzquierda(8,data[8]+"", "0"));
//            printer.println("FECHA: " + data[9]);
//            printer.setBoldOff();
//            printer.printLine();
//            printer.setLeftAlignCommand();
//            printer.println(Util.completarDerecha(limit,"CLIENTE: " + data[30]));
//            if(data.length>32){
//                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + data[32] ));
//            }else{
//                printer.println(Util.completarDerecha(limit,"RUC/DNI: " + "" ));
//            }
//            if(data.length>33){
//                printer.println(Util.completarDerecha(limit,"DIRECCION: " + data[33] ));
//            }else{
//                printer.println(Util.completarDerecha(limit,"DIRECCION: " + "" ));
//            }
//            printer.setCenterAlignCommand();
//            printer.printLine();
//            double subtotal = Double.parseDouble(data[26])-Double.parseDouble(data[23]);
//            printer.println(
//                    Util.completarIzquierda(limit,
//                    "SUB TOTAL S/." + Util.completarIzquierda(8, Util.formatDecimal(subtotal))));
//            printer.println(
//                    Util.completarIzquierda(limit,
//                    "IGV S/." + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(data[23])))));
//            printer.println(Util.completarIzquierda(limit,"---------------------"));
//            printer.println(
//                    Util.completarIzquierda(limit,
//                    "TOTAL S/." + Util.completarIzquierda(8, Util.formatDecimal(Double.parseDouble(data[26])))));
//            printer.printLine();
//            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
//                printer.setCenterAlignCommand();
//            }
//            printer.println("Cajero: "+data[10]);
//            printer.println(Util.obtieneFechaDiaHora());
//            printer.printLine();
//            if(copia){
//                printer.println("*** Copia ***");
//            }
//            printer.println("    \n");
//            printer.println("    \n");
//            printer.println("    \n");
//            printer.println("    \n");
//            printer.println("    \n");
//            if(SesionData.getSesion().getModelo().trim().compareTo("TM-T88V")==0){
//                printer.setCute();
//            }
//            printer.printHibrida(SesionData.getSesion().getImpresora()); 
//        }catch(Exception ex){
//            ex.printStackTrace();
//        }
//    }
    
    public void Limpiar(){
       
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOKPassChange;
    private javax.swing.JPasswordField confirmPassChange;
    private javax.swing.JPasswordField currentPassChange;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField newPassChange;
    private javax.swing.JTextField userChangePass;
    // End of variables declaration//GEN-END:variables
}
